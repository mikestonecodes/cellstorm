{"mappings":"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","sources":["node_modules/ogl/src/math/functions/Vec3Func.js","node_modules/ogl/src/math/Vec3.js","node_modules/ogl/src/core/Geometry.js","node_modules/ogl/src/core/Program.js","node_modules/ogl/src/core/Renderer.js","node_modules/ogl/src/math/functions/QuatFunc.js","node_modules/ogl/src/math/functions/Vec4Func.js","node_modules/ogl/src/math/Quat.js","node_modules/ogl/src/math/functions/Mat4Func.js","node_modules/ogl/src/math/Mat4.js","node_modules/ogl/src/math/Euler.js","node_modules/ogl/src/math/functions/EulerFunc.js","node_modules/ogl/src/math/functions/Vec2Func.js","node_modules/ogl/src/math/Vec2.js","src/texture3D.js","src/world/index.js","node_modules/ogl/src/core/Transform.js","src/shaders/main.vert","src/shaders/main.frag"],"sourcesContent":["const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n// TODO: when would I disableVertexAttribArray ?\n// TODO: use offset/stride if exists\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n\n        if (!attr.buffer) {\n            attr.buffer = this.gl.createBuffer();\n\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        this.gl.bufferData(attr.target, attr.data, this.gl.STATIC_DRAW);\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * 2,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const offset = attr.offset || 0;\n        const stride = attr.stride || attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = offset, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const offset = attr.offset || 0;\n        const stride = attr.stride || attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = offset, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        QuatFunc.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        QuatFunc.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        QuatFunc.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this, qA, qB);\n        } else {\n            QuatFunc.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        QuatFunc.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this, axis, a);\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this, this, q, t);\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this, m, order);\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\nexport function cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0];\n    let y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n","import * as Vec2Func from './functions/Vec2Func.js';\n\nexport class Vec2 extends Array {\n    constructor(x = 0, y = x) {\n        super(x, y);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set(x, y = x) {\n        if (x.length) return this.copy(x);\n        Vec2Func.set(this, x, y);\n        return this;\n    }\n\n    copy(v) {\n        Vec2Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec2Func.add(this, va, vb);\n        else Vec2Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec2Func.subtract(this, va, vb);\n        else Vec2Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec2Func.multiply(this, this, v);\n        else Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec2Func.divide(this, this, v);\n        else Vec2Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec2Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec2Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec2Func.distance(this, v);\n        else return Vec2Func.length(this);\n    }\n\n    squaredLen() {\n        return this.squaredDistance();\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec2Func.squaredDistance(this, v);\n        else return Vec2Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec2Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) return Vec2Func.cross(va, vb);\n        return Vec2Func.cross(this, va);\n    }\n\n    scale(v) {\n        Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec2Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec2Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec2Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec2Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec2Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    lerp(v, a) {\n        Vec2Func.lerp(this, this, v, a);\n        return this;\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        return a;\n    }\n}\n","// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture3D {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            layers = 1,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.layers = layers;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage3D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.layers, 0, this.format, this.type, this.image);\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage3D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                this.gl.texImage3D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage3D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage3D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}","/* eslint-disable immutable/no-mutation */\n\nimport { Renderer, Transform, Program, Vec2, Geometry } from 'ogl'\n\nimport { Texture3D } from '../texture3D';\n\nexport const renderer = new Renderer({ dpr: 0.75 })\nexport const scene = new Transform()\n\nimport vertex from \"../shaders/main.vert\"\nimport fragment from \"../shaders/main.frag\"\n\n\nconst gl = renderer.gl\ndocument.body.appendChild(gl.canvas)\ngl.clearColor(1, 1, 1, 1);\n\nconst zoom = { value: 0.5 }\nconst pan = { value: new Vec2(0, 0) }\nconst uTime = { value: 0.0 }\n\nfunction resize() {\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\nresize()\nwindow.addEventListener('resize', resize, false)\n\nconst images = [\n\n    {\n\n        wa: 11,\n        data: new Uint8Array([\n            0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n            0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1,\n            1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n            1, 0, 2, 0, 0, 2, 0, 1, 0, 1, 1,\n            1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n            1, 0, 3, 3, 3, 3, 0, 1, 0, 1, 1,\n            0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1,\n            0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n            0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0,\n            0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n            0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1,\n            1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n            1, 0, 2, 0, 0, 2, 0, 1, 0, 1, 1,\n            1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n            1, 0, 3, 3, 3, 3, 0, 1, 0, 1, 1,\n            0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1,\n            0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1,\n            0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0\n        ])\n\n    },\n    {\n\n        wa: 8,\n        data: new Uint8Array([\n            5, 5, 5, 5, 5, 5, 5, 5,\n            5, 5, 5, 5, 5, 5, 5, 5,\n            5, 5, 5, 5, 5, 5, 5, 5,\n            5, 5, 5, 5, 5, 5, 5, 5,\n            5, 5, 5, 5, 5, 5, 5, 5,\n            5, 5, 5, 5, 5, 5, 5, 5,\n            5, 5, 5, 5, 5, 5, 5, 5\n        ])\n\n    }]\n\n\nfor (let i = 0; i < 10000; i++) {\n    images.push({\n        wa: 32,\n        data: new Uint8Array(32 * 32).fill(0).map(() => Math.floor(Math.random() * 7))\n    })\n}\n\n\nconst width = 1024;\nconst height = width;\n\nconst cols = Math.floor(width / 32);\nconst layers = Math.ceil(images.length / (cols * cols));\n\nconst c = new Uint8Array((width * height) * layers);\nlet indx = 0;\nfor (const image of images) {\n    for (let y = 0; y < 32; y++) {\n        for (let x = 0; x < image.wa; x++) {\n            c[x + (y + (Math.floor(indx / cols) * 32)) * width + ((indx % cols) * 32)] = image.data[x + y * image.wa];\n        }\n    }\n    indx++;\n}\n\nconst tex3D = new Texture3D(gl, { target: gl.TEXTURE_2D_ARRAY, image: c, generateMipmaps: false, format: gl.ALPHA, type: gl.UNSIGNED_BYTE, width: width, layers, magFilter: gl.NEAREST, minFilter: gl.NEAREST })\nconst params = (new URL(document.location)).searchParams;\nconst numparticles = Number(params.get(\"particles\")) || 100000;\n\nconst numQuads = numparticles;\nconst program = new Program(gl, {\n    vertex,\n    fragment,\n    transparent: true,\n    cullFace: false,\n    uniforms: {\n        uTime,\n        zoom,\n        pan,\n        width: { value: width },\n        height: { value: height },\n        u_image: { value: tex3D },\n        numQuads: { value: numQuads }\n    }\n})\n\nif (!gl.getProgramParameter(program.program, gl.LINK_STATUS)) {\n    throw new Error(\"shader compile error ^^^^^\")\n}\n\n//0 ... numparticles\nconst data = new Float32Array([...Array(numparticles).keys()]);\n\nconst geometry = new Geometry(gl, {\n    ivid: { data, instanced: 1 },\n});\n\ngeometry.bindAttributes(program);\nprogram.use();\n\nconst timeUniformLoc = gl.getUniformLocation(program.program, \"uTime\");\n\nrequestAnimationFrame(update)\n\nfunction update() {\n    uTime.value += 0.01;\n    gl.uniform1f(timeUniformLoc, uTime.value);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, numQuads)\n    requestAnimationFrame(update);\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","#version 300 es\nprecision highp float;\nprecision highp sampler2DArray;\nuniform float uTime;\nuniform int numQuads;\nuniform highp int width;\nuniform highp int height;\nin float ivid;\nflat out int vid;\nflat out float rotation;\nout vec2 vemu_PointCoord;\n\nfloat hash(float p) {\n  vec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n  p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n  return fract(p2.x * p2.y * 95.4337);\n}\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvec2 rotateUV(vec2 uv, float rotation, vec2 mid)\n{\n    return vec2(\n      cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\n      cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\n    );\n}\n\nvoid main() {\n\n  int qID = numQuads-gl_InstanceID;\n  float u = float(qID) / float(numQuads);\n  vid = int(ivid);\n  float size =  15. +(sin(uTime  ) * 10.0);\n  float off = floor(uTime + u) / 1000.0;            // changes once per second per vertex\n\n  float x = hash(u + off) * 2.0 - 1.0;             // random position\n  float y = fract(uTime + u) * -2.0 + 1.0;      // 1.0 ->  -1.0\n  rotation = uTime;\n  ivec2 unitQuad = ivec2(\n      gl_VertexID / 6 + gl_VertexID % 2,\n      (gl_VertexID / 2 + gl_VertexID / 3) % 2);\n\n  gl_Position = vec4(   vec2(x,y)  , u,  1.);\n  gl_Position.xy += (vec2(unitQuad) - 0.5) * 2.0 * size / vec2(width,height);\n  vec2 rot = rotateUV(gl_Position.xy, rotation,vec2(x,y));\n  gl_Position.xy = rot;\n  vemu_PointCoord = vec2(unitQuad.x, 1.0 - float(unitQuad.y));\n  \n\n}","#version 300 es\nprecision highp float;\n precision highp sampler2DArray;\n#define PI 3.1415926538\n\nuniform float uTime;\nuniform sampler2DArray u_image;\nuniform sampler2D u_imagetest;\nuniform highp int width;\nuniform highp int height;\n\nflat in int vid;\nflat in float rotation;\nout vec4 color;\n\nin vec2 vemu_PointCoord;\n\n#pragma glslify: palette = require('./palette.glsl')\n\n\n\nvoid drawTiles(){\n    vec2    uv = vemu_PointCoord.xy; \n    color = vec4(0.5);\n    if(uv.x < 0. || uv.x > 0. + 1.|| uv.y < 0. || uv.y > 0. + 1.) {\n     //    discard;\n       color = vec4(0.0,0.0,0.0,0.0);\n       return;\n    }\n\n\n    vec2 spriteSize = vec2(32.,32.);\n    \n    float spnum = float(vid );\n  \n    float dx = spriteSize.x / float(width);\n    float dy = spriteSize.y / float(height);\n    \n    float cols = float(width) / spriteSize.x;\n    \n    float index = mod(spnum  , cols*cols);\n    // From linear index to row/col pair\n    float col = mod(index, cols);\n    float row = floor(index / cols);\n    uv = vec2(dx * uv.x + (col/cols) ,   dy * uv.y + (row/cols) );\n    int currentLayer = int(floor(spnum / (cols*cols)));\n    vec3 currentPos = vec3(uv, float(currentLayer));\n    int indx = int(texture(u_image, currentPos).a * 255.0) ;\n    if(indx == 0 ){\n          color = vec4(0.0,0.0,0.0,0.0);\n       return;\n    }\n    color=  vec4(palette[indx],1.0);\n    \n    }\n\n\nvoid main() {\n   // if(gl_FragCoord.z > 1.0) discard;\n   // color = vec4(vec3(gl_FragCoord.z*1.), 1.0);\n\n    drawTiles();\n}\n\n"],"names":["$c380ab779b20f8e7$export$f24224f1c91d8156","a","x","y","z","Math","sqrt","$c380ab779b20f8e7$export$784d13d8ee351f07","out","$c380ab779b20f8e7$export$e16d8520af44a096","b","$c380ab779b20f8e7$export$4e2d2ead65e5f7e3","$c380ab779b20f8e7$export$dcdf75081b88279d","$c380ab779b20f8e7$export$ab44e1323ffc8376","$c380ab779b20f8e7$export$a3295358bff77e","len","$c380ab779b20f8e7$export$94132a0e348806d4","$c380ab779b20f8e7$export$bb646b20bb93d339","ax","ay","az","bx","by","bz","$c380ab779b20f8e7$export$944b09d2ad10b378","tempA","tempB","cosine","PI","acos","$dc698fbfbd358e8b$export$838423f3adec30fa","Array","this","v","set","length","copy","$c380ab779b20f8e7$export$adaa4cf7ef1b65be","add","va","vb","sub","multiply","divide","inverse","distance","$c380ab779b20f8e7$export$9f17032d917177de","squaredLen","squaredDistance","$c380ab779b20f8e7$export$88e6ebb4fe54f538","negate","cross","scale","normalize","dot","equals","applyMatrix4","mat4","m","w","$c380ab779b20f8e7$export$5ffbd13800309d59","scaleRotateMatrix4","$c380ab779b20f8e7$export$58ce737ad0c12bc2","applyQuaternion","q","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","$c380ab779b20f8e7$export$c32adef9e939ce85","angle","lerp","t","$c380ab779b20f8e7$export$3a89f8d6f6bf6c9f","clone","fromArray","o","toArray","transformDirection","super","$e86df4bb3db8d8f8$var$tempVec3","$e86df4bb3db8d8f8$var$ID","$e86df4bb3db8d8f8$var$ATTR_ID","$e86df4bb3db8d8f8$var$isBoundsWarned","$e894034559d439ae$var$ID","$e894034559d439ae$var$arrayCacheF32","$e894034559d439ae$var$setUniform","gl","type","location","value","arrayLen","valueLen","undefined","Float32Array","i","$e894034559d439ae$var$flatten","setValue","renderer","state","uniformLocations","get","slice","l","$e894034559d439ae$var$arraysEqual","$e894034559d439ae$var$setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","$e894034559d439ae$var$addLineNumbers","string","lines","split","join","$e894034559d439ae$var$warnCount","$e894034559d439ae$var$warn","message","console","warn","$8e9b8501fb079735$var$tempVec3","$8e9b8501fb079735$var$ID","$a6fc941137bb0b6b$export$2060d2db72cce88f","aw","bw","$a6fc941137bb0b6b$export$784d13d8ee351f07","$a6fc941137bb0b6b$export$adaa4cf7ef1b65be","$a6fc941137bb0b6b$export$94132a0e348806d4","$a6fc941137bb0b6b$export$a3295358bff77e","$56ee521b62080981$export$5edfe12bb88684c8","onChange","identity","rotateX","rad","sin","cos","$a6fc941137bb0b6b$export$a59c8716592e09af","rotateY","$a6fc941137bb0b6b$export$cf71e4d4ca4d1cfd","rotateZ","$a6fc941137bb0b6b$export$ea6eae3365de5b9c","a0","a1","a2","a3","invDot","$a6fc941137bb0b6b$export$6897c284b6f9f4dc","conjugate","qA","qB","fromMatrix3","matrix3","fRoot","fTrace","j","k","$a6fc941137bb0b6b$export$272a1eb8e5a4b55b","fromEuler","euler","order","sx","cx","sy","cy","sz","cz","$a6fc941137bb0b6b$export$7a404a587ea85af","fromAxisAngle","axis","s","$a6fc941137bb0b6b$export$4286ddefc8f49512","slerp","omega","cosom","sinom","scale0","scale1","$a6fc941137bb0b6b$export$1544d9bc2995de08","$8f86dea74f598afe$export$2060d2db72cce88f","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","$8f86dea74f598afe$export$71dc54d92bd04b57","mat","m11","m12","m13","m21","m22","m23","m31","m32","m33","hypot","$8f86dea74f598afe$export$df3937d3b537df0a","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","$4701727e512c2ceb$export$21c0e3d5e995d7e1","m00","m01","m02","m03","m10","m20","m30","$8f86dea74f598afe$export$adaa4cf7ef1b65be","translate","$8f86dea74f598afe$export$d73ee8ef04f5226a","rotate","c","b00","b01","b02","b10","b11","b12","b20","b21","b22","abs","$8f86dea74f598afe$export$bb628a54ab399bc9","$8f86dea74f598afe$export$dcdf75081b88279d","ma","mb","fromPerspective","fov","aspect","near","far","fovy","f","tan","nf","$8f86dea74f598afe$export$541149539f3a4684","fromOrthogonal","left","right","bottom","top","lr","bt","$8f86dea74f598afe$export$4f2167e613cfc87b","fromQuaternion","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","$8f86dea74f598afe$export$2ff2bbe382249af7","setPosition","b03","b04","b05","b06","b07","b08","b09","det","$8f86dea74f598afe$export$6897c284b6f9f4dc","compose","pos","xy","xz","yz","$8f86dea74f598afe$export$ddf9c55c9f2be172","getRotation","getTranslation","getScaling","getMaxScaleOnAxis","max","$8f86dea74f598afe$export$6276f53cd18ff805","lookAt","eye","target","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","$8f86dea74f598afe$export$aa67782f4dc9e52c","determinant","$8f86dea74f598afe$export$a04698f914c55ed9","$849ab47d903f9916$var$tmpMat4","$849ab47d903f9916$export$d93cc409a0768c5f","reorder","fromRotationMatrix","asin","min","atan2","$0e37f398678102a0$export$48889b85f55f068c","$438e4046e11014e5$export$e16d8520af44a096","$438e4046e11014e5$export$4e2d2ead65e5f7e3","$438e4046e11014e5$export$dcdf75081b88279d","$438e4046e11014e5$export$f24224f1c91d8156","$438e4046e11014e5$export$bb646b20bb93d339","$6dec078c29fa7e07$export$ac4bca90992eed1","$438e4046e11014e5$export$adaa4cf7ef1b65be","$438e4046e11014e5$export$ab44e1323ffc8376","applyMatrix3","mat3","$438e4046e11014e5$export$5ffbd13800309d59","$438e4046e11014e5$export$3a89f8d6f6bf6c9f","$d8e986cc1d5bd28f$var$emptyPixel","Uint8Array","$d8e986cc1d5bd28f$var$isPowerOf2","$d8e986cc1d5bd28f$var$ID","$8478354ce9c541dd$export$e30378e28ad3e6ab","setSize","width","height","canvas","dpr","Object","assign","style","setViewport","viewport","setScissor","scissor","enable","id","disable","setBlendFunc","src","dst","srcAlpha","dstAlpha","blendFunc","blendFuncSeparate","setBlendEquation","modeRGB","modeAlpha","FUNC_ADD","blendEquation","blendEquationSeparate","setCullFace","cullFace","setFrontFace","frontFace","setDepthMask","depthMask","setDepthFunc","depthFunc","activeTexture","activeTextureUnit","TEXTURE0","bindFramebuffer","FRAMEBUFFER","buffer","framebuffer","getExtension","extension","webgl2Func","extFunc","bind","extensions","sortOpaque","renderOrder","program","zDepth","sortTransparent","sortUI","getRenderList","scene","camera","frustumCull","sort","renderList","updateFrustum","traverse","node","visible","draw","frustumCulled","frustumIntersectsMesh","push","opaque","transparent","ui","forEach","depthTest","worldMatrix","projectionViewMatrix","concat","render","update","clear","autoClear","depth","DEPTH_TEST","color","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","stencil","STENCIL_BUFFER_BIT","updateMatrixWorld","document","createElement","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","webgl","attributes","getContext","isWebgl2","error","ONE","ZERO","CCW","LESS","premultiplyAlpha","flipY","unpackAlignment","textureUnits","boundBuffer","Map","vertexAttribDivisor","drawArraysInstanced","drawElementsInstanced","createVertexArray","bindVertexArray","deleteVertexArray","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","$8478354ce9c541dd$var$gl","setParent","parent","notifyParent","removeChild","addChild","child","notifyChild","children","indexOf","splice","force","matrixAutoUpdate","updateMatrix","worldMatrixNeedsUpdate","matrix","quaternion","position","callback","decompose","rotation","invert","body","appendChild","clearColor","$8478354ce9c541dd$var$pan","$8478354ce9c541dd$var$uTime","$8478354ce9c541dd$var$resize","window","innerWidth","innerHeight","addEventListener","$8478354ce9c541dd$var$images","wa","data","fill","map","floor","random","$8478354ce9c541dd$var$cols","$8478354ce9c541dd$var$width","$8478354ce9c541dd$var$layers","ceil","$8478354ce9c541dd$var$c","$8478354ce9c541dd$var$indx","image","$8478354ce9c541dd$var$tex3D","glState","bindTexture","texture","textureUnit","needsUpdate","store","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","minFilter","texParameteri","TEXTURE_MIN_FILTER","magFilter","TEXTURE_MAG_FILTER","wrapS","TEXTURE_WRAP_S","wrapT","TEXTURE_WRAP_T","anisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_CUBE_MAP","texImage3D","TEXTURE_CUBE_MAP_POSITIVE_X","level","internalFormat","format","ArrayBuffer","isView","layers","isCompressedTexture","compressedTexImage3D","generateMipmaps","generateMipmap","CLAMP_TO_EDGE","LINEAR","onUpdate","RGBA","UNSIGNED_BYTE","TEXTURE_2D","NEAREST_MIPMAP_LINEAR","createTexture","REPEAT","TEXTURE_2D_ARRAY","ALPHA","NEAREST","$8478354ce9c541dd$var$params","URL","searchParams","$8478354ce9c541dd$var$numparticles","Number","$8478354ce9c541dd$var$numQuads","$8478354ce9c541dd$var$program","applyState","CULL_FACE","BLEND","depthWrite","use","flipFaces","currentProgram","useProgram","activeUniform","name","uniformName","uniform","uniforms","isStruct","structProperty","isStructArray","structIndex","CW","remove","deleteProgram","vertex","fragment","BACK","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","numUniforms","ACTIVE_UNIFORMS","uIndex","getActiveUniform","getUniformLocation","match","isNaN","attributeLocations","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","getAttribLocation","attributeOrder","$parcel$interopDefault","u_image","numQuads","Error","$8478354ce9c541dd$var$data","keys","addAttribute","key","attr","size","constructor","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","offset","count","byteLength","divisor","instanced","createBuffer","updateAttribute","isInstanced","instancedCount","drawRange","index","bindBuffer","bufferData","STATIC_DRAW","setIndex","setDrawRange","start","setInstancedCount","createVAO","VAOs","bindAttributes","numLoc","vertexAttribPointer","enableVertexAttribArray","mode","TRIANGLES","currentGeometry","drawElements","drawArrays","getPosition","computeBoundingBox","array","bounds","center","radius","Infinity","computeBoundingSphere","maxRadiusSq","key1","deleteBuffer","ivid","$8478354ce9c541dd$var$timeUniformLoc","requestAnimationFrame","$8478354ce9c541dd$var$update"],"version":3,"file":"index.6db5f684.js.map"}