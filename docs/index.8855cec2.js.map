{"mappings":"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","sources":["node_modules/ogl/src/core/Program.js","node_modules/ogl/src/math/functions/Vec3Func.js","node_modules/ogl/src/math/Vec3.js","node_modules/ogl/src/core/Renderer.js","node_modules/ogl/src/math/functions/QuatFunc.js","node_modules/ogl/src/math/functions/Vec4Func.js","node_modules/ogl/src/math/Quat.js","node_modules/ogl/src/math/functions/Mat4Func.js","node_modules/ogl/src/math/Mat4.js","node_modules/ogl/src/math/Euler.js","node_modules/ogl/src/math/functions/EulerFunc.js","node_modules/ogl/src/math/functions/Vec2Func.js","node_modules/ogl/src/math/Vec2.js","src/texture3D.js","src/world/index.js","node_modules/ogl/src/core/Transform.js","src/shaders/main.vert","src/shaders/main.frag"],"sourcesContent":["// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        QuatFunc.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        QuatFunc.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        QuatFunc.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this, qA, qB);\n        } else {\n            QuatFunc.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        QuatFunc.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this, axis, a);\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this, this, q, t);\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this, m, order);\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\nexport function cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0];\n    let y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n","import * as Vec2Func from './functions/Vec2Func.js';\n\nexport class Vec2 extends Array {\n    constructor(x = 0, y = x) {\n        super(x, y);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set(x, y = x) {\n        if (x.length) return this.copy(x);\n        Vec2Func.set(this, x, y);\n        return this;\n    }\n\n    copy(v) {\n        Vec2Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec2Func.add(this, va, vb);\n        else Vec2Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec2Func.subtract(this, va, vb);\n        else Vec2Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec2Func.multiply(this, this, v);\n        else Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec2Func.divide(this, this, v);\n        else Vec2Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec2Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec2Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec2Func.distance(this, v);\n        else return Vec2Func.length(this);\n    }\n\n    squaredLen() {\n        return this.squaredDistance();\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec2Func.squaredDistance(this, v);\n        else return Vec2Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec2Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) return Vec2Func.cross(va, vb);\n        return Vec2Func.cross(this, va);\n    }\n\n    scale(v) {\n        Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec2Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec2Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec2Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec2Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec2Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    lerp(v, a) {\n        Vec2Func.lerp(this, this, v, a);\n        return this;\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        return a;\n    }\n}\n","// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture3D {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            layers = 1,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.layers = layers;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage3D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.layers, 0, this.format, this.type, this.image);\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage3D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                this.gl.texImage3D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage3D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage3D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}","/* eslint-disable immutable/no-mutation */\n\n\nimport { Renderer,Transform,Program,Vec2,Texture} from 'ogl'\n\nimport {Texture3D } from '../texture3D';\n\nexport const renderer = new Renderer({ dpr: 0.75})\nexport const scene = new Transform()\n\nimport vertex from \"../shaders/main.vert\"\nimport fragment from \"../shaders/main.frag\"\n\n\nconst gl = renderer.gl\ndocument.body.appendChild(gl.canvas)\ngl.clearColor(1, 1, 1, 1);\n\nconst zoom = { value: 0.5 }\nconst pan = { value: new Vec2(0,0)}\nconst uTime = { value: 0.0 }\n\nfunction resize() {\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\nresize()\nwindow.addEventListener('resize', resize, false)\n\n\n\nconst images = [ \n    \n    {\n        wa:11,\n        data:new Uint8Array([\n        0,0,1,1,1,1,0,0,0,1,1,\n        0,1,0,0,0,0,1,0,0,1,1,\n        1,0,0,0,0,0,0,1,0,1,1,\n        1,0,2,0,0,2,0,1,0,1,1,\n        1,0,0,0,0,0,0,1,0,1,1,\n        1,0,3,3,3,3,0,1,0,1,1,\n        0,1,0,0,0,0,1,0,0,1,1,\n        0,0,1,1,1,1,0,0,0,1,1,\n        0,0,1,1,1,1,0,0,1,1,0,\n        0,0,1,1,1,1,0,0,0,1,1,\n        0,1,0,0,0,0,1,0,0,1,1,\n        1,0,0,0,0,0,0,1,0,1,1,\n        1,0,2,0,0,2,0,1,0,1,1,\n        1,0,0,0,0,0,0,1,0,1,1,\n        1,0,3,3,3,3,0,1,0,1,1,\n        0,1,0,0,0,0,1,0,0,1,1,\n        0,0,1,1,1,1,0,0,0,1,1,\n        0,0,1,1,1,1,0,0,1,1,0\n    ])\n    \n    },\n    {\n   \n    wa:8,\n    data:new Uint8Array([\n    0,0,1,1,1,1,0,0,\n    0,1,0,0,0,0,1,0,\n    1,0,0,0,0,0,0,1,\n    1,0,2,0,0,2,0,1,\n    1,0,0,0,0,0,0,1,\n    1,0,3,3,3,3,0,1,\n    0,1,0,0,0,0,1,0,\n    0,0,1,1,1,1,0,0\n])\n\n}]\n\n\nfor (let i = 0; i < 30000; i++) {\n    images.push({\n        wa:32,\n        data:new Uint8Array(32 * 32).fill(0).map((a,ind) =>Math.floor(Math.random() *7 ))\n    })\n}\n\nfor(const image of images){\n    image.w = image.h = 32;\n}\n\n\nconst width =   1024 ;\nconst height = width;\n\nconst cols = Math.floor(width / 32);\nconst layers = Math.ceil(images.length / (cols*cols) );\nconsole.log(cols,layers,width,images.length / (cols*cols));\n\n\nconst c = new Uint8Array((width*height) * layers );\n   let indx = 0;\n  \n   \n    for(const image of images){\n       for (let y = 0; y < 32 ; y++) {\n            for (let x = 0; x < image.wa ; x++) { \n                        c[x+(y+(Math.floor(indx/cols ) *32))*width+((indx%cols)*32 ) ] = image.data[x+y*image.wa];    \n                        \n            }\n        }\n        indx++;    \n    }\n\n  \n\nconst tex = new Texture3D(gl,{target:gl.TEXTURE_2D_ARRAY,image:c,generateMipmaps:false,format:gl.ALPHA,type:gl.UNSIGNED_BYTE,width:width,layers,magFilter:gl.NEAREST,minFilter:gl.NEAREST})\nconst numVertices = 100000;\nconst program = new Program(gl, {\n    vertex,\n    fragment,\n    uniforms: {\n        uTime,   \n        zoom,\n        pan,\n        width:{value   :width},\n        height:{value  :height},\n        u_image: { value: tex },\n        numVerts:{value:numVertices}\n    },\n    transparent: true,\n    depthTest: false\n})\n\nif(!gl.getProgramParameter(program.program, gl.LINK_STATUS)){\n    throw new Error(\"shader compile error ^^^^^\")\n}\n\nrequestAnimationFrame(update)\n\nfunction update() {\n    requestAnimationFrame(update);\n    uTime.value += 0.01;\n    program.use();\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.drawArrays(gl.POINTS, 0, numVertices);\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","#version 300 es\n\nuniform float uTime;\nuniform int numVerts;\n\nflat out int vid;\nflat out float rotation;\n\nfloat hash(float p) {\n  vec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n  p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n  return fract(p2.x * p2.y * 95.4337);\n}\n\nvoid main() {\n  float u = float(gl_VertexID) / float(numVerts);\n  vid = gl_VertexID;\n  float size =  14.+(sin(uTime  ) * 70.0);\n    float off = floor(uTime + u) / 1000.0;            // changes once per second per vertex\n\n  float x = hash(u + off) * 2.0 - 1.0;             // random position\n  float y = fract(uTime + u) * -2.0 + 1.0;      // 1.0 ->  -1.0\n  rotation = uTime;\n  gl_Position = vec4(x, y, 0, 1);\n  gl_PointSize = size;\n}","#version 300 es\nprecision highp float;\n precision highp sampler2DArray;\n#define PI 3.1415926538\n\nuniform float uTime;\nuniform sampler2DArray u_image;\nuniform int width;\nuniform int height;\n\nflat in int vid;\nflat in float rotation;\n\nout vec4 color;\n#pragma glslify: palette = require('./palette.glsl')\n\nvec2 rotateUV(vec2 uv, float rotation, vec2 mid)\n{\n    float cosAngle = cos(rotation);\n    float sinAngle = sin(rotation);\n    return vec2(\n        cosAngle * (uv.x - mid.x) + sinAngle * (uv.y - mid.y) + mid.x,\n        cosAngle * (uv.y - mid.y) - sinAngle * (uv.x - mid.x) + mid.y\n    );\n}\n\nvoid drawTiles(){\n    vec2    uv = gl_PointCoord.xy; \n    uv = rotateUV(uv , rotation,vec2(0.5) ) ;\n    uv/=0.5;\n    uv-=0.5;\n\n    if(uv.x < 0. || uv.x > 0. + 0.99999 || uv.y < 0. || uv.y > 0. + 0.99999) {\n         discard;\n         return;\n    }\n\n    vec2 spriteSize = vec2(32.,32.);\n    \n    float spnum =float(vid);\n  \n\n    float dx = spriteSize.x / float(width);\n    float dy = spriteSize.y / float(height);\n    \n    float cols = float(width) / spriteSize.x;\n    \n    float index = mod(spnum  , cols*cols);\n    // From linear index to row/col pair\n    float col = mod(index, cols);\n    float row = floor(index / cols);\n    uv = vec2(dx * uv.x + (col/cols) ,   dy * uv.y + (row/cols) );\n    int indx = int(texture(u_image, vec3(uv,floor(spnum/(cols*cols)))).a * 255.0) ;\n    if(indx == 0 )discard;\n    color=  vec4(palette[indx],1.0);\n}\n\n\nvoid main() {\n    drawTiles();\n}\n\n"],"names":["$e894034559d439ae$var$ID","$e894034559d439ae$var$arrayCacheF32","$e894034559d439ae$var$setUniform","gl","type","location","value","length","a","arrayLen","valueLen","undefined","Float32Array","i","set","$e894034559d439ae$var$flatten","setValue","renderer","state","uniformLocations","get","slice","b","l","$e894034559d439ae$var$arraysEqual","$e894034559d439ae$var$setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","$e894034559d439ae$var$addLineNumbers","string","lines","split","join","$e894034559d439ae$var$warnCount","$e894034559d439ae$var$warn","message","console","warn","$c380ab779b20f8e7$export$f24224f1c91d8156","x","y","z","Math","sqrt","$c380ab779b20f8e7$export$784d13d8ee351f07","out","$c380ab779b20f8e7$export$e16d8520af44a096","$c380ab779b20f8e7$export$4e2d2ead65e5f7e3","$c380ab779b20f8e7$export$dcdf75081b88279d","$c380ab779b20f8e7$export$ab44e1323ffc8376","$c380ab779b20f8e7$export$a3295358bff77e","len","$c380ab779b20f8e7$export$94132a0e348806d4","$c380ab779b20f8e7$export$bb646b20bb93d339","ax","ay","az","bx","by","bz","$c380ab779b20f8e7$export$944b09d2ad10b378","tempA","tempB","cosine","PI","acos","$dc698fbfbd358e8b$export$838423f3adec30fa","Array","this","v","copy","$c380ab779b20f8e7$export$adaa4cf7ef1b65be","add","va","vb","sub","multiply","divide","inverse","distance","$c380ab779b20f8e7$export$9f17032d917177de","squaredLen","squaredDistance","$c380ab779b20f8e7$export$88e6ebb4fe54f538","negate","cross","scale","normalize","dot","equals","applyMatrix4","mat4","m","w","$c380ab779b20f8e7$export$5ffbd13800309d59","scaleRotateMatrix4","$c380ab779b20f8e7$export$58ce737ad0c12bc2","applyQuaternion","q","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","$c380ab779b20f8e7$export$c32adef9e939ce85","angle","lerp","t","$c380ab779b20f8e7$export$3a89f8d6f6bf6c9f","clone","fromArray","o","toArray","transformDirection","super","$8e9b8501fb079735$var$tempVec3","$8e9b8501fb079735$var$ID","$a6fc941137bb0b6b$export$2060d2db72cce88f","aw","bw","$a6fc941137bb0b6b$export$784d13d8ee351f07","$a6fc941137bb0b6b$export$adaa4cf7ef1b65be","$a6fc941137bb0b6b$export$94132a0e348806d4","$a6fc941137bb0b6b$export$a3295358bff77e","$56ee521b62080981$export$5edfe12bb88684c8","onChange","identity","rotateX","rad","sin","cos","$a6fc941137bb0b6b$export$a59c8716592e09af","rotateY","$a6fc941137bb0b6b$export$cf71e4d4ca4d1cfd","rotateZ","$a6fc941137bb0b6b$export$ea6eae3365de5b9c","a0","a1","a2","a3","invDot","$a6fc941137bb0b6b$export$6897c284b6f9f4dc","conjugate","qA","qB","fromMatrix3","matrix3","fRoot","fTrace","j","k","$a6fc941137bb0b6b$export$272a1eb8e5a4b55b","fromEuler","euler","order","sx","cx","sy","cy","sz","cz","$a6fc941137bb0b6b$export$7a404a587ea85af","fromAxisAngle","axis","s","$a6fc941137bb0b6b$export$4286ddefc8f49512","slerp","omega","cosom","sinom","scale0","scale1","$a6fc941137bb0b6b$export$1544d9bc2995de08","$8f86dea74f598afe$export$2060d2db72cce88f","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","$8f86dea74f598afe$export$71dc54d92bd04b57","mat","m11","m12","m13","m21","m22","m23","m31","m32","m33","hypot","$8f86dea74f598afe$export$df3937d3b537df0a","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","$4701727e512c2ceb$export$21c0e3d5e995d7e1","m00","m01","m02","m03","m10","m20","m30","$8f86dea74f598afe$export$adaa4cf7ef1b65be","translate","$8f86dea74f598afe$export$d73ee8ef04f5226a","rotate","c","b00","b01","b02","b10","b11","b12","b20","b21","b22","abs","$8f86dea74f598afe$export$bb628a54ab399bc9","$8f86dea74f598afe$export$dcdf75081b88279d","ma","mb","fromPerspective","fov","aspect","near","far","fovy","f","tan","nf","$8f86dea74f598afe$export$541149539f3a4684","fromOrthogonal","left","right","bottom","top","lr","bt","$8f86dea74f598afe$export$4f2167e613cfc87b","fromQuaternion","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","$8f86dea74f598afe$export$2ff2bbe382249af7","setPosition","b03","b04","b05","b06","b07","b08","b09","det","$8f86dea74f598afe$export$6897c284b6f9f4dc","compose","pos","xy","xz","yz","$8f86dea74f598afe$export$ddf9c55c9f2be172","getRotation","getTranslation","getScaling","getMaxScaleOnAxis","max","$8f86dea74f598afe$export$6276f53cd18ff805","lookAt","eye","target","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","$8f86dea74f598afe$export$aa67782f4dc9e52c","determinant","$8f86dea74f598afe$export$a04698f914c55ed9","$849ab47d903f9916$var$tmpMat4","$849ab47d903f9916$export$d93cc409a0768c5f","reorder","fromRotationMatrix","asin","min","atan2","$0e37f398678102a0$export$48889b85f55f068c","$438e4046e11014e5$export$e16d8520af44a096","$438e4046e11014e5$export$4e2d2ead65e5f7e3","$438e4046e11014e5$export$dcdf75081b88279d","$438e4046e11014e5$export$f24224f1c91d8156","$438e4046e11014e5$export$bb646b20bb93d339","$6dec078c29fa7e07$export$ac4bca90992eed1","$438e4046e11014e5$export$adaa4cf7ef1b65be","$438e4046e11014e5$export$ab44e1323ffc8376","applyMatrix3","mat3","$438e4046e11014e5$export$5ffbd13800309d59","$438e4046e11014e5$export$3a89f8d6f6bf6c9f","$d8e986cc1d5bd28f$var$emptyPixel","Uint8Array","$d8e986cc1d5bd28f$var$isPowerOf2","$d8e986cc1d5bd28f$var$ID","$8478354ce9c541dd$export$e30378e28ad3e6ab","setSize","width","height","canvas","dpr","Object","assign","style","setViewport","viewport","setScissor","scissor","enable","id","disable","setBlendFunc","src","dst","srcAlpha","dstAlpha","blendFunc","blendFuncSeparate","setBlendEquation","modeRGB","modeAlpha","FUNC_ADD","blendEquation","blendEquationSeparate","setCullFace","cullFace","setFrontFace","frontFace","setDepthMask","depthMask","setDepthFunc","depthFunc","activeTexture","activeTextureUnit","TEXTURE0","bindFramebuffer","FRAMEBUFFER","buffer","framebuffer","getExtension","extension","webgl2Func","extFunc","bind","extensions","sortOpaque","renderOrder","program","zDepth","sortTransparent","sortUI","getRenderList","scene","camera","frustumCull","sort","renderList","updateFrustum","traverse","node","visible","draw","frustumCulled","frustumIntersectsMesh","push","opaque","transparent","ui","forEach","depthTest","worldMatrix","projectionViewMatrix","concat","render","update","clear","autoClear","depth","DEPTH_TEST","color","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","stencil","STENCIL_BUFFER_BIT","updateMatrixWorld","document","createElement","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","webgl","attributes","getContext","isWebgl2","error","ONE","ZERO","CCW","LESS","premultiplyAlpha","flipY","unpackAlignment","textureUnits","boundBuffer","Map","vertexAttribDivisor","drawArraysInstanced","drawElementsInstanced","createVertexArray","bindVertexArray","deleteVertexArray","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","$8478354ce9c541dd$var$gl","setParent","parent","notifyParent","removeChild","addChild","child","notifyChild","children","indexOf","splice","force","matrixAutoUpdate","updateMatrix","worldMatrixNeedsUpdate","matrix","quaternion","position","callback","decompose","rotation","invert","body","appendChild","clearColor","$8478354ce9c541dd$var$pan","$8478354ce9c541dd$var$uTime","$8478354ce9c541dd$var$resize","window","innerWidth","innerHeight","addEventListener","$8478354ce9c541dd$var$images","wa","data","fill","map","ind","floor","random","image","h","$8478354ce9c541dd$var$cols","$8478354ce9c541dd$var$width","$8478354ce9c541dd$var$layers","ceil","log","$8478354ce9c541dd$var$c","$8478354ce9c541dd$var$indx","image1","$8478354ce9c541dd$var$tex","glState","bindTexture","texture","textureUnit","needsUpdate","store","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","minFilter","texParameteri","TEXTURE_MIN_FILTER","magFilter","TEXTURE_MAG_FILTER","wrapS","TEXTURE_WRAP_S","wrapT","TEXTURE_WRAP_T","anisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_CUBE_MAP","texImage3D","TEXTURE_CUBE_MAP_POSITIVE_X","level","internalFormat","format","ArrayBuffer","isView","layers","isCompressedTexture","compressedTexImage3D","generateMipmaps","generateMipmap","CLAMP_TO_EDGE","LINEAR","onUpdate","RGBA","UNSIGNED_BYTE","TEXTURE_2D","NEAREST_MIPMAP_LINEAR","createTexture","REPEAT","TEXTURE_2D_ARRAY","ALPHA","NEAREST","$8478354ce9c541dd$var$program","applyState","CULL_FACE","BLEND","depthWrite","use","flipFaces","currentProgram","useProgram","activeUniform","name","uniformName","uniform","uniforms","isStruct","structProperty","isStructArray","structIndex","CW","remove","deleteProgram","vertex","fragment","BACK","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","numUniforms","ACTIVE_UNIFORMS","uIndex","getActiveUniform","getUniformLocation","match","Number","isNaN","attributeLocations","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","getAttribLocation","attributeOrder","$parcel$interopDefault","u_image","numVerts","Error","requestAnimationFrame","$8478354ce9c541dd$var$update","drawArrays","POINTS"],"version":3,"file":"index.8855cec2.js.map"}